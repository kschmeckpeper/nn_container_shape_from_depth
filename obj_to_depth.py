import vtk
from pycaster import pycaster
import numpy as np
from PIL import Image
import cv2
from math import cos, sin
import random


width = 640
height = 480
fx = 500
fy = 500
camera_distance = 4

def pixel_to_world(x, y, start_point, angle):
    dist = 1000

    x -= width / 2
    y -= height / 2

    pos = [dist * x / fx, -dist * y / fy, dist]

    rotated_pos = [pos[0], 
                   cos(angle) * pos[1] + sin(angle) * pos[2], 
                   cos(angle) * pos[2] - sin(angle) * pos[1]]
    return rotated_pos


#start_point = np.array([0, 0, -2])




for i in range(285):
    caster = pycaster.rayCaster.fromSTL("/home/karl/glass/nn_container_shape_from_depth/input/autogenerated_" + str(i) + ".stl", scale=1)

    for j in range(5):
        angle = - j / 4.0  * np.pi * 2 / 8

        unrotated_pos = np.array([random.random() * camera_distance / 20,
                                  random.random() * camera_distance / 20,
                                  -camera_distance])

        pos_angle = angle + np.pi / 8 * random.random() - np.pi / 16

        start_point = np.array([unrotated_pos[0],
                                cos(pos_angle) * unrotated_pos[1] + sin(pos_angle) * unrotated_pos[2],
                                cos(pos_angle) * unrotated_pos[2] - sin(pos_angle) * unrotated_pos[1]])
        #start_point = unrotated_pos
        #print angle, start_point
        depths = np.ones((height, width)) * 1000

        for x in range(0, width, 1):
            for y in range(0, height, 1):
                target = pixel_to_world(x, y, start_point, angle)
                # print target
                intersections = caster.castRay(start_point, target)

                distances = [np.linalg.norm(np.array(intersect) - start_point) * 50 for intersect in intersections]
                distances.append(255)
                depths[y, x] = min(distances)


        img = Image.fromarray(depths)
        #img.save('output/depths' + str(i) + '.png')
        #img.show()
        
        cv2.imwrite('output/depths_' + str(i) + '_' +str(j) + '.png', depths)
        
        print "Saved", i, j
        # exit()

